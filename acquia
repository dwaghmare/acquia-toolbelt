require "rubygems"
require "thor"
require "netrc"
require "highline/import"
require "faraday"
require "json"

class Acquia < Thor
  # A no_commands block is designed to show the methods that cannot be invoked
  # and as such, do not have a description.
  no_commands {
    # Internal: Used for outputting a pretty success message.
    #
    # Returns the coloured and formatted string.
    def success(text)
      puts "\e[#32m#{text}\e[0m"
    end

    # Internal: Used for outputting a pretty error message.
    #
    # Returns the coloured and formatted string.
    def fail(text)
      puts "\e[#31m#{text}\e[0m"
    end

    # Internal: Used for outputting a pretty info message.
    #
    # Returns the coloured and formatted string.
    def info(text)
      puts "\e[#36m#{text}\e[0m"
    end

    # Internal: Create a request to the Acquia API.
    #
    # The request generated contains all the correct user authentication and
    # headers.
    #
    # Returns a JSON string of the body.s
    def acquia_api_call(resource)
      n = Netrc.read
      @acquia_user, @acquia_password = n['cloudapi.acquia.com']

      conn = Faraday.new
      conn.basic_auth(@acquia_user, @acquia_password)
      response = conn.get "https://cloudapi.acquia.com/v1/#{resource}.json"
      response.body
    end
  }

  # Public: Log into the Acquia Cloud API.
  #
  # This sets up the user account within the netrc file so that subsequent
  # calls can reuse the authentication without the user being prompted for it.
  desc 'login', 'Login to your Acquia account.'
  def login
    user = ask 'Enter your username:'
    password = ask 'Enter your password:'

    # Update (or create if needed) the netrc file that will contain the user
    # authentication details.
    n = Netrc.read
    n.new_item_prefix = "# This entry was added for connecting to the Acquia Cloud API\n"
    n['cloudapi.acquia.com'] = user, password
    n.save

    success 'Your user credentials have been successfully set.'
  end

  desc 'subscriptions', 'Find all subscriptions that you have access to.'
  def subscriptions
    say acquia_api_call('sites')
  end

  # Public: Get server specs and information from the subscription.
  desc 'servers', 'Get a list of servers and specs associated with your subscription.'
  def servers
  # Public: Get server specs and information from the environment.
  desc "view-servers <subscription> <environment>", "Get a list of servers specifications for an environment."
  def view_servers(subscription, environment)
    server_env = JSON.parse(acquia_api_call("sites/#{subscription}/envs/#{environment}/servers"))
    server_env.each do |server|
      say "> Host: #{server["fqdn"]}"
      say "> EC2 region: #{server["ec2_region"]}"
      say "> Availability zone: #{server["ec2_availability_zone"]}"
      say "> EC2 instance type: #{server["ami_type"]}"

      if server["services"] && server["services"]["php_max_procs"]
        say "> PHP max processes: #{server["services"]["php_max_procs"]}"
      end

      if server["services"] && server["services"]["status"]
        say "> Status: #{server["services"]["status"]}"
      end

      if server["services"] && server["services"]["web"]
        say "> Environment status: #{server["services"]["web"]["env_status"]}"
      end
      say
    end
  end

  # Public: Get all databases in the subscription.
  desc 'databases', 'Get information on the database servers within your subscription.'
  def databases
    say 'getting databases'
  end

  # Public: Get all environment information.
  desc 'environments', 'See all available environments.'
  def environments
    say 'getting environments'
  end

  # Public: Get users on the subscription.
  desc 'users', 'Find out who has access and keys within your subscription.'
  def users
    say 'getting users'
  end
end

Acquia.start
